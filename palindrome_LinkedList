class ListNode {
    int val;
    ListNode next;

   public ListNode(int val){
       this.val=val;
       this.next=null;
   }
}

class Main {

    public static ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode forw = curr.next;
            curr.next = prev;
            prev = curr;
            curr = forw;
        }
        return prev;
    }

 
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true;

        // Step 1: Find the middle of the list
        ListNode slow = head;
        ListNode fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse the second half
        ListNode temp = reverse(slow.next);
        slow.next = temp;

        // Step 3: Compare first half and second half
        ListNode p1 = head;
        ListNode p2 = slow.next;
        while (p2 != null) {
            if (p1.val != p2.val) {
                return false;
            }
            p1 = p1.next;
            p2 = p2.next;
        }

        return true;
    }


    public static void main(String[] args) {
      
        ListNode a = new ListNode(1);

        a.next=new ListNode(2);
        a.next.next=new ListNode(2);
        a.next.next.next=new ListNode(1);

        Main sol = new Main();
        boolean result = sol.isPalindrome(a);
        System.out.println("Is the linked list a palindrome? " + result);
    }
}
