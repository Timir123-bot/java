class Node {
    int data;
    Node next;
    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class Solution {
    public Node getIntersection(Node headA, Node headB) {
        Node tempA = headA;
        Node tempB = headB;
        int lengthA = 0, lengthB = 0;

        while (tempA != null) {
            lengthA++;
            tempA = tempA.next;
        }
        while (tempB != null) {
            lengthB++;
            tempB = tempB.next;
        }


        tempA = headA;
        tempB = headB;

    
        if (lengthA > lengthB) {
            int diff = lengthA - lengthB;
            for (int i = 0; i < diff; i++) {
                tempA = tempA.next;
            }
        } else {
            int diff = lengthB - lengthA;
            for (int i = 0; i < diff; i++) {
                tempB = tempB.next;
            }
        }

        
        while (tempA != null && tempB != null) {
            if (tempA == tempB) return tempA;
            tempA = tempA.next;
            tempB = tempB.next;
        }

        return null;
    }
}

public class Main {
    public static void main(String[] args) {
    
        Node Common = new Node(5);
        Common.next = new Node(6);
        Common.next.next = new Node(7);

    
        Node headA = new Node(1);
        headA.next = new Node(2);
        headA.next.next = new Node(3);
        headA.next.next.next = new Node(4);
        headA.next.next.next.next = Common;

        
        Node headB = new Node(9);
        headB.next = new Node(11);
        headB.next.next = Common;

        Solution sol = new Solution();
        Node intersection = sol.getIntersection(headA, headB);

        if (intersection != null) {
            System.out.println("Intersection found at node with data: " + intersection.data);
        } else {
            System.out.println("No intersection found");
        }
    }
}
